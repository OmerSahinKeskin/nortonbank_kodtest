Intro:

When I build a system that is meant to scale up, I try to keep a few things in mind.

Readability and clarity - Easier for someone else to work with your codebase.
Easy to test - Easy to demonstrate and ensure that your codebase works as intended.
Breaking down the code into smaller pieces (different classes, enums, etc.) so that you can reuse a lot and make testing easier.
Of course, performance is also important to consider.

Ideally, before this is sent off to a client or used, it should be tested to prove that it works.

I should also mention that I think tollFeeSchedule, which I have added, might need to be mentioned earlier somewhere to make GetTollFee more testable. But I chose to define it directly in the class because it won't change often and won't be used anywhere else.

Im also aware of "public void AddRedDays(Dictionary<int, List<int>> redDaysInMonth)" in class RedDays isnt good performance wise since we have a nested foreach loop. I think its ok. since this method ideally should only be called once a year. 

Changes I have made and brief justifications.

1. Moved TollFreeVechicles Enum inside TollCalculator to own file named TollFreeVechicles.
Problem: Not scalable and hard to find if we have a large codebase.
Reason:
Easy for new programmers to find the tollfreevechicles if they need to remove or add new vechicles in the future.
There is also a case for not to move this enum. Since the enum isnt used anywhere else we dont need a new file so only the class should know of its existence. But since a enum file isnt taking alot of space its better for us to move the enums to its own file incase we need to use the enums in the future for something else. If we would have a space issue then we should check if we can optimize the code instead of removing the enum file.

2. Removed or statements of return in isTollFreeVehicle
Problem: Not scalable and less readability in the future if kept
Reason:
Right now we only have 6 vehicletypes so you can argue that this isnt a problem but if we would add more vehicletypes in the future it would take unnecessary time to add but most important it wouldnt be readable if we started to add more vehicletypes.
If there is only 6 vehicletypes a switchcase would be better used here for easy readability

3. Changed GetTollFee(DateTime date, Vehicle vehicle)
Problem: Not scalable and is hard to read.
Reason:
Ill start by saying there is two ways to change this method.
1. First way to change this is that I would have to make an assumption and that assumption would be that the times and prices will never change and will always be the same. in that case a switch statement would be perfect instead of a alot of if, else if statements. swtich statements would make it more readable.
2. Secound way is that I assume we would change the times and even add more times in the future and even change prices.
So a Dictionary is added on top of the file to make it easier for next programmer to add a new timespans and change prices. By adding hours and minutes in the first pair(key) in the dictonary and adding price as the value.

4. Changed IsTollFreeDate(DateTime date) to IsTollFreeDate(DateTime date, RedDays redDaysInYear)
Problem: Not scalable, Hard to change and might be hard to read if many days are red days in a year.
Reason:
Ill start by saying im not aware of any standard library that can be used to see all red days in a year for sweden. I have found a thirdparty library that you can use but i wont use it here since the asignment was more about styling and not implementation.(library name is https://github.com/nager/Nager.Date)

The old implementation of IsTollFreeDate would make it so that we would need alot of hard coded red days and we would have to add it to the if-statement. we could theortically end up with 12 rows if statements that are 31 spaces long. that will be unreadable.

The new implementation would make it able for us to either ping a server and create a dictionary for our program to use without needing to change any if statements and even inject a dictionary with all red days for the year when program startup.

The changes will also make the code more testable(even if some people thing private methods shouldnt be tested).

5. Removed hard coded price information.
Problem: Hard to change.
Reason:
Hardcoded values that we know will/might change in the future i.e. prices and maxfee is better to have as an enums so that its easy to change when needed.
Hardcoded values like minutes, hours, sec of the day is ok to have if they are used as tools to convert from day to hours, min and sec.